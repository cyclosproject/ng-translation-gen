export class {{className}} {

  {{#root}}
  /**
   * Locales for which translations should be available
   */
  static locales(): string[] {
    return [
{{#locales}}      '{{.}}'{{^@last}},{{/@last}}
      {{/locales}}
    ];
  }

  /**
   * Returns the file name which contains the translations for the given locale
   */
  static fileName(locale: string): string {
    switch (locale) {
{{#additionalLocales}}      case '{{locale}}': return '{{filename}}';
      {{/additionalLocales}}
      default: return '{{defaultFilename}}';
    }
  }

  /**
   * Returns a hash for the file contents on the moment it was compiled
   */
  static contentHash(locale: string): string {
    switch (locale) {
{{#additionalLocales}}      case '{{locale}}': return '{{hash}}';
      {{/additionalLocales}}
      default: return '{{defaultHash}}';
    }
  }

  /** Indicates whether the translation values have been initialized **/
  initialized$ = new BehaviorSubject(false);

  {{/root}}
  private _translations: Translations = new Translations({{{path}}});{{#hasNested}}

  private _nested = {
{{#nested}}    {{property}}: new {{className}}(){{^@last}},{{/@last}}
  {{/nested}}
  };{{/hasNested}}

  /**
   * Sets the default translations, that is, the values returned in case the specific
   * keys are not found.
   */
  set defaultValues(defaultValues: Object) {
    this._translations.defaultValues = defaultValues;{{#nested}}
    this._nested.{{property}}.defaultValues = defaultValues['{{property}}'];{{/nested}}
  }

  /**
   * Initializes the translation values.
   * @param values The translations values.
   */
  initialize(values: Object) {
    this._translations.initialize(values);{{#nested}}
    this._nested.{{property}}.initialize(values['{{property}}']);{{/nested}}{{#root}}
    this.initialized$.next(true);{{/root}}
  }{{#direct}}

  /**
   * Returns the value of translation message for key `{{key}}`.
   * Default value: `{{{defaultValue}}}`
   */
  {{^hasArgs}}get {{/hasArgs}}{{name}}({{#args}}{{name}}: {{type}}{{^@last}}, {{/@last}}{{/args}}): string {
    {{#hasArgs}}return this._translations.get('{{key}}', {
{{#txArgs}}      {{identifier}}: {{fullIdentifier}}{{^@last}},{{/@last}}
{{/txArgs}}
    });{{/hasArgs}}{{^hasArgs}}return this._translations.get('{{key}}');{{/hasArgs}}
  }{{/direct}}{{#nested}}

  /**
   * Returns the nested accessor for translation messages in `{{property}}`.
   */
  get {{property}}(): {{className}} {
    return this._nested.{{property}};
  }{{/nested}}
}

{{#nested}}
{{>class}}
{{/nested}}