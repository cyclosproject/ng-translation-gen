export class {{className}} {

{{#root}}
  /**
  * Locales for which translations should be available
  */
  static locales(): string[] {
    return [
{{#locales}}      '{{locale}}'{{^last}},{{/last}}
{{/locales}}
    ];
  }

  /**
   * Returns the file name which contains the translations for the given locale
   */
  static fileName(locale: string): string {
    switch (locale) {
{{#additionalLocales}}      case '{{locale}}': return '{{baseName}}{{{separator}}}{{locale}}.json';
{{/additionalLocales}}
      default: return '{{baseName}}.json';
    }
  }

  /** Indicates whether the translation values have been initialized **/
  initialized$ = new BehaviorSubject(false);

{{/root}}
  private _translations: Translations = new Translations({{{path}}});{{#hasNested}}

  private _nested = {
{{#nested}}
    {{property}}: new {{className}}(){{^last}},{{/last}}
{{/nested}}
  };{{/hasNested}}

  /**
   * Initializes the translation values.
   * @param values The translations values.
   */
  initialize(values: Object) {
    this._translations.initialize((values || {}) as TranslationValues);{{#nested}}
    this._nested.{{property}}.initialize(values['{{property}}'] || {});{{/nested}}{{#root}}
    this.initialized$.next(true);{{/root}}
  }{{#direct}}

  /**
   * Returns the value of translation message for key `{{key}}`.
   */
  {{^hasArgs}}get {{/hasArgs}}{{name}}({{#args}}{{name}}: {{type}}{{^last}}, {{/last}}{{/args}}): string {
    {{#hasArgs}}return this._translations.get('{{key}}', {{=<% %>=}}{<%={{ }}=%>{{#txArgs}}
      {{identifier}}: {{fullIdentifier}}{{^last}},{{/last}}{{/txArgs}}
    });
{{/hasArgs}}{{^hasArgs}}return this._translations.get('{{key}}');
    {{/hasArgs}}
  }{{/direct}}{{#nested}}

  /**
   * Returns the nested accessor for translation messages in `{{property}}`.
   */
  get {{property}}(): {{className}} {
    return this._nested.{{property}};
  }{{/nested}}
}

{{#nested}}
{{>class}}
{{/nested}}
