#!/usr/bin/env node
'use strict';

const fse = require('fs-extra');
const path = require('path');
const ArgumentParser = require('argparse').ArgumentParser;

/**
 * JSON configuration file read by the generator (if present).
 */
const CONFIG = "ng-translation-gen.json";

/**
 * JSON Schema used to define the JSON configuration file.
 */
const SCHEMA = "ng-translation-gen-schema.json";

/**
 * Read the package configuration.
 */
const pkg = parseJSON(path.join(__dirname, "package.json"));

/**
 * Read the configuration schema.
 */
const schema = parseJSON(path.join(__dirname, SCHEMA));

/******************************************************************************/
/********************************* MAIN ***************************************/
/******************************************************************************/

var argParser = new ArgumentParser({
  version: pkg.version,
  addHelp: true,
  description: "Translation message accessors generator for Angular 2+ projects. " +
  "Either a file named " + CONFIG + " should exist in the current directory " +
  "or arguments can be specified. Also, a configuration file can be generated " +
  "with all default values if --gen-config is specified."
});
argParser.addArgument(
  ["-i", "--input"],
  {
    help: schema.properties.input.description,
    defaultValue: schema.properties.input.default,
    dest: "input",
  }
);
argParser.addArgument(
  ["-o", "--output"],
  {
    help: schema.properties.output.description,
    defaultValue: schema.properties.output.default,
    dest: "output"
  }
);
argParser.addArgument(
  ["--gen-config"],
  {
    help: "Generates the configuration file " + CONFIG +
    " in the current directory. No message accessor classes are generated." +
    " If input and output are specified, their values are stored in the" +
    " generated file as well.",
    action: "storeTrue",
    dest: "genConfig"
  }
);
var args = argParser.parseArgs();

// Check the action
var configExists = fse.existsSync(CONFIG);
if (args.genConfig) {
  if (configExists) {
    // Ask for confirmation
    askThenGenerateConfig();
  } else {
    // Write the configuration file
    generateConfig();
  }
} else {
  // if there was given some argument then execute from args
  if (process.argv.length >= 3) {
    // thre is no support to specify the mapping from command-line then force to
    // to include all files.
    args.includeOnlyMappedFiles = false;
    run(args);
  } else if (configExists) {
    // The configuration file exists, so read it
    run(parseJSON(CONFIG));
  } else {
    // No configuration file. Show the usage and exit.
    argParser.parseArgs(["--help"]);
  }
}

/******************************************************************************/
/*************************** Utility functions ********************************/
/******************************************************************************/

/**
 * Generates a configuration file in the current directory
 */
function generateConfig() {
  var options = {
    "$schema": "./node_modules/ng-translation-gen/ng-translation-gen-schema.json"
  };
  if (args.input) {
    options.input = args.input;
  }
  if (args.output) {
    options.output = args.output;
  }
  setDefaults(options, schema);
  // force to include all files for the generated config
  options.includeOnlyMappedFiles = false;

  var json = JSON.stringify(options, null, 2);
  fse.writeFileSync(CONFIG, json, {encoding: "utf8"});
  console.info("Wrote " + CONFIG);
}

/**
 * Asks if the configuration file should be overridden, then, if so, do it
 */
function askThenGenerateConfig() {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question("The configuration file " + CONFIG + " already exists.\n" +
  "Do you want to override it? [y/N]", (answer) => {
    if (answer == 'y' || answer == 'Y') {
      generateConfig();
    }
    rl.close();
  });
}

/**
 * Sets the default options for those properties not set.
 */
function setDefaults(options, schema) {
  // apply the default values for those properties not defined
  var properties = schema.properties;
  for (var propName in properties) {
    var propDef = properties[propName];
    if (propDef.default && !options.hasOwnProperty(propName)) {
      options[propName] = propDef.default;
    }
  }
  if (!options.hasOwnProperty("mapping")) {
      options.mapping = {};
  }
}

/**
 * Runs the ng-translation-gen generation
 */
function run(options) {
  // sets the default values for those properties not set in the options
  setDefaults(options, schema);

  // check for valid configuration
  if (options.includeOnlyMappedFiles) {
    let isEmptyMapping = JSON.stringify(options.mapping) === JSON.stringify({});
    if (isEmptyMapping) {
      console.log("Warning: There is nothing to generate. The mapping is empty " +
        "and the 'includeOnlyMappedFiles' flag is true");
      process.exit(0);
    }
  }
  if (!fse.existsSync(options.input)) {
    console.log("Error: missing input folder: " + options.input);
    process.exit(1);
  }

  var ngTranslationGen = require("./ng-translation-gen.js");
  ngTranslationGen(options);
}

function parseJSON(file) {
  return JSON.parse(fse.readFileSync(file, "utf8"));
}
